{"version":3,"file":"src_app_account_account_module_ts.js","mappings":"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","sources":["./src/app/account/account-routing.module.ts","./src/app/account/account.module.ts","./src/app/account/auth/auth-routing.ts","./src/app/account/auth/auth.module.ts","./src/app/account/auth/login/login.component.ts","./src/app/account/auth/login/login.component.html","./src/app/account/auth/passwordreset/passwordreset.component.ts","./src/app/account/auth/passwordreset/passwordreset.component.html","./src/app/account/auth/signup/signup.component.ts","./src/app/account/auth/signup/signup.component.html","./src/app/core/services/user.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { AuthModule } from './auth/auth.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    AuthModule\n  ]\n})\nexport class AccountModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { PasswordresetComponent } from './passwordreset/passwordreset.component';\n\nconst routes: Routes = [\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n    {\n        path: 'signup',\n        component: SignupComponent\n    },\n    {\n        path: 'reset-password',\n        component: PasswordresetComponent\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { UiModule } from '../../shared/ui/ui.module';\nimport { AuthRoutingModule } from './auth-routing';\n\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { PasswordresetComponent } from './passwordreset/passwordreset.component';\n\n@NgModule({\n  declarations: [LoginComponent, SignupComponent, PasswordresetComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgbAlertModule,\n    UiModule,\n    AuthRoutingModule\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AuthModule { }\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n  UntypedFormBuilder,\n  UntypedFormGroup,\n  Validators,\n} from \"@angular/forms\";\n\nimport { AuthenticationService } from \"../../../core/services/auth.service\";\nimport { AuthfakeauthenticationService } from \"../../../core/services/authfake.service\";\n\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { first } from \"rxjs/operators\";\n\nimport { environment } from \"../../../../environments/environment\";\nimport { SharedService } from \"src/app/shared/custom_http.service\";\nimport { CustomAlertService } from \"src/app/shared/custom-alert.service\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"],\n})\nexport class LoginComponent implements OnInit {\n  loginForm: UntypedFormGroup;\n  submitted = false;\n  error = \"\";\n  returnUrl: string;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(\n    public httpShareService: SharedService,\n    private formBuilder: UntypedFormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    public authenticationService: AuthenticationService,\n    public authFackservice: AuthfakeauthenticationService,\n    public customAlert: CustomAlertService\n  ) {}\n\n  ngOnInit() {\n    document.body.removeAttribute(\"data-layout\");\n    document.body.classList.add(\"auth-body-bg\");\n\n    this.loginForm = this.formBuilder.group({\n      username: [\"nicho\", [Validators.required]],\n      password: [\"1234\", [Validators.required]],\n    });\n\n    // reset login status\n    // this.authenticationService.logout();\n    // get return url from route parameters or default to '/'\n    // tslint:disable-next-line: no-string-literal\n    // this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  /**\n   * Form submit\n   */\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return false;\n    } else {\n      // LOGIN THE USER AND REDIRECT TO HOMW  PAGE.\n      let login_url =\n        environment.E_SHOP_BASE_URL +\n        environment.AUTHENTICATION.AUTHENTICATION_BASE_URL +\n        environment.AUTHENTICATION.LOGIN_URL;\n      this.httpShareService\n        .post(null, login_url, this.loginForm.value)\n        .subscribe(\n          (data) => {\n            sessionStorage.setItem(\"access\", data[\"access\"]);\n\n            this.router.navigate([\"/\"]);\n            // this.customAlert.successmsg('Welcome to E-shop!', `You are wellcome, ${data.user.username}`)\n          },\n          (error) => {\n            console.log(error);\n            this.error = error ? error : \"\";\n          }\n        );\n    }\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a routerLink=\"\"><i class=\"mdi mdi-home-variant h2 text-white\"></i></a>\n</div>\n <div>\n  <div class=\"container-fluid p-0\">\n    <div class=\"row g-0\">\n      <div class=\"col-lg-4\">\n        <div class=\"authentication-page-content p-4 d-flex align-items-center min-vh-100\">\n          <div class=\"w-100\">\n            <div class=\"row justify-content-center\">\n              <div class=\"col-lg-9\">\n                <div>\n                  <div class=\"text-center\">\n                    <div>\n                      <a routerLink=\"\" class=\"logo\"><H1>ESHOP</H1></a>\n                    </div>\n\n                    <h4 class=\"font-size-18 mt-4\">Welcome Back !</h4>\n                    <p class=\"text-muted\">Sign in to continue to ESHOP.</p>\n                  </div>\n\n                  <div class=\"p-2 mt-5\">\n                    <form class=\"form-horizontal\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n                      <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n                      <div class=\"form-group auth-form-group-custom mb-4\">\n                        <i class=\"ri-user-2-line auti-custom-input-icon\"></i>\n                        <label for=\"email\">Username</label>\n                        <input type=\"text\" formControlName=\"username\" class=\"form-control\" id=\"username\" placeholder=\"username\"\n                          [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\">\n                        <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f.username.errors.required\">username is required</div>\n                          <div *ngIf=\"f.username.errors.username\">username must be a valid username address</div>\n                        </div>\n                      </div>\n\n                      <div class=\"form-group auth-form-group-custom mb-4\">\n                        <i class=\"ri-lock-2-line auti-custom-input-icon\"></i>\n                        <label for=\"password\">Password</label>\n                        <input type=\"password\" formControlName=\"password\" class=\"form-control\" id=\"password\"\n                          [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" placeholder=\"Password\" />\n                        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                        </div>\n                      </div>\n\n                      <div class=\"form-check\">\n                        <input type=\"checkbox\" class=\"form-check-input\" id=\"customControlInline\">\n                        <label class=\"form-check-label\" for=\"customControlInline\">Remember me</label>\n                      </div>\n\n                      <div class=\"mt-4 text-center\">\n                        <button class=\"btn btn-primary w-md waves-effect waves-light\" type=\"submit\">Log In</button>\n                      </div>\n\n                      <div class=\"mt-4 text-center\">\n                        <a routerLink=\"/account/reset-password\" class=\"text-muted\"><i class=\"mdi mdi-lock me-1\"></i>\n                          Forgot\n                          your\n                          password?</a>\n                      </div>\n                    </form>\n                  </div>\n\n                  <div class=\"mt-5 text-center\">\n                    <p>Don't have an account ? <a routerLink=\"/account/signup\" class=\"fw-medium text-primary\">\n                        Register </a> </p>\n                    <p>© 2023 ESHOP. Crafted with <i class=\"mdi mdi-heart text-danger\"></i> by Themesdesign</p>\n                  </div>\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-lg-8\">\n        <div class=\"authentication-bg\">\n          <div class=\"bg-overlay\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div> \n<!-- end page -->\n","import { Component, OnInit, AfterViewInit } from \"@angular/core\";\nimport {\n  UntypedFormBuilder,\n  UntypedFormGroup,\n  Validators,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\n\nimport { AuthenticationService } from \"../../../core/services/auth.service\";\nimport { environment } from \"../../../../environments/environment\";\n\n@Component({\n  selector: \"app-passwordreset\",\n  templateUrl: \"./passwordreset.component.html\",\n  styleUrls: [\"./passwordreset.component.scss\"],\n})\n\n/**\n * Reset-password component\n */\nexport class PasswordresetComponent implements OnInit, AfterViewInit {\n  resetForm: UntypedFormGroup;\n  submitted = false;\n  error = \"\";\n  success = \"\";\n  loading = false;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthenticationService\n  ) {}\n\n  ngOnInit() {\n    document.body.removeAttribute(\"data-layout\");\n    document.body.classList.add(\"auth-body-bg\");\n\n    this.resetForm = this.formBuilder.group({\n      email: [\"\", [Validators.required, Validators.email]],\n    });\n  }\n\n  ngAfterViewInit() {}\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.resetForm.controls;\n  }\n\n  /**\n   * On submit form\n   */\n  onSubmit() {\n    this.success = \"\";\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.resetForm.invalid) {\n      return;\n    }\n    if (environment.defaultauth === \"firebase\") {\n      this.authenticationService\n        .resetPassword(this.f.email.value)\n        .catch((error) => {\n          this.error = error ? error : \"\";\n        });\n    }\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a routerLink=\"\"><i class=\"mdi mdi-home-variant h2 text-white\"></i></a>\n</div>\n<div>\n  <div class=\"container-fluid p-0\">\n    <div class=\"row g-0\">\n      <div class=\"col-lg-4\">\n        <div class=\"authentication-page-content p-4 d-flex align-items-center min-vh-100\">\n          <div class=\"w-100\">\n            <div class=\"row justify-content-center\">\n              <div class=\"col-lg-9\">\n                <div>\n                  <div class=\"text-center\">\n                    <div>\n                      <a routerLink=\"\" class=\"logo\"><img src=\"assets/images/logo-dark.png\" height=\"20\" alt=\"logo\"></a>\n                    </div>\n\n                    <h4 class=\"font-size-18 mt-4\">Reset Password</h4>\n                    <p class=\"text-muted\">Reset your password to Nazox.</p>\n                  </div>\n\n                  <div class=\"p-2 mt-5\">\n                    <div class=\"alert alert-success mb-4\" role=\"alert\">\n                      Enter your Email and instructions will be sent to you!\n                    </div>\n                    <form class=\"form-horizontal\" [formGroup]=\"resetForm\" (ngSubmit)=\"onSubmit()\">\n                      <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n\n                      <div class=\"form-group auth-form-group-custom mb-4\">\n                        <i class=\"ri-mail-line auti-custom-input-icon\"></i>\n                        <label for=\"email\">Email</label>\n                        <input type=\"email\" formControlName=\"email\" class=\"form-control\"\n                          [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" id=\"email\" placeholder=\"Email\">\n                        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                          <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                        </div>\n                      </div>\n\n                      <div class=\"mt-4 text-center\">\n                        <button class=\"btn btn-primary w-md waves-effect waves-light\" type=\"submit\">Reset</button>\n                      </div>\n                    </form>\n                  </div>\n\n                  <div class=\"mt-5 text-center\">\n                    <p>Don't have an account ? <a routerLink=\"/account/login\" class=\"fw-medium text-primary\">\n                        Log in\n                      </a> </p>\n                    <p>© 2023 Nazox. Crafted with <i class=\"mdi mdi-heart text-danger\"></i> by Themesdesign</p>\n                  </div>\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-lg-8\">\n        <div class=\"authentication-bg\">\n          <div class=\"bg-overlay\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!-- end page -->\n","import { Component, OnInit, AfterViewInit } from \"@angular/core\";\nimport {\n  UntypedFormBuilder,\n  UntypedFormGroup,\n  Validators,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\n\nimport { AuthenticationService } from \"../../../core/services/auth.service\";\nimport { environment } from \"../../../../environments/environment\";\nimport { UserProfileService } from \"../../../core/services/user.service\";\nimport { SharedService } from \"src/app/shared/custom_http.service\";\nimport { CustomAlertService } from \"src/app/shared/custom-alert.service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\n@Component({\n  selector: \"app-signup\",\n  templateUrl: \"./signup.component.html\",\n  styleUrls: [\"./signup.component.scss\"],\n})\nexport class SignupComponent implements OnInit, AfterViewInit {\n  signupForm: UntypedFormGroup;\n  submitted = false;\n  issubmitting = false;\n  errors = {\n    username: [],\n    email: [],\n    password: [],\n    first_name: [],\n    password2: [],\n    last_name: [],\n  };\n  successmsg = false;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private userService: UserProfileService,\n    private sharedService: SharedService,\n    private customAlert: CustomAlertService\n  ) {}\n\n  ngOnInit() {\n    document.body.removeAttribute(\"data-layout\");\n    document.body.classList.add(\"auth-body-bg\");\n\n    this.signupForm = this.formBuilder.group({\n      username: [\"\", Validators.required],\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", Validators.required],\n      first_name: [\"\", Validators.required],\n      password2: [\"\", Validators.required],\n      last_name: [\"\", Validators.required],\n    });\n  }\n\n  ngAfterViewInit() {}\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.signupForm.controls;\n  }\n\n  /**\n   * On submit form\n   */\n\n  clearErrors() {\n    this.errors = {\n      username: [],\n      email: [],\n      password: [],\n      first_name: [],\n      password2: [],\n      last_name: [],\n    };\n  }\n  onSubmit() {\n    this.submitted = true;\n    this.issubmitting = true;\n    this.clearErrors();\n\n    // stop here if form is invalid\n    if (this.signupForm.invalid) {\n      // return false;\n      this.customAlert.warningToast(\n        \"Invalid Form\",\n        \"Please fill the form correctly\",\n        \"warning\"\n      );\n      this.issubmitting = false;\n      return;\n    } else {\n      let regester_url =\n        environment.E_SHOP_BASE_URL +\n        environment.AUTHENTICATION.AUTHENTICATION_BASE_URL +\n        environment.AUTHENTICATION.REGISTER_URL;\n      const body = {\n        username: this.signupForm.value.username,\n        email: this.signupForm.value.email,\n        password: this.signupForm.value.password,\n        first_name: this.signupForm.value.first_name,\n        password2: this.signupForm.value.password2,\n        last_name: this.signupForm.value.last_name,\n      };\n      this.sharedService.post(null, regester_url, body).subscribe(\n        (data) => {\n          this.issubmitting = false;\n\n          this.customAlert.successToast(\n            \"Account Created Successfully\",\n            \"Account Created Successfully\",\n            \"success\"\n          );\n          this.router.navigate([\"/account/login\"]);\n        },\n        (error: HttpErrorResponse) => {\n          this.issubmitting = false;\n\n          this.handleErrorResponse(error);\n          this.customAlert.errorToast(\n            \"Error in creating account\",\n            \"Error in creating account\",\n            \"error\"\n          );\n        }\n      );\n    }\n  }\n  handleErrorResponse(errorResponse) {\n    for (let field in errorResponse) {\n      console.log(field);\n      if (this.errors.hasOwnProperty(field)) {\n        this.errors[field] = errorResponse[field];\n      }\n    }\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a routerLink=\"\"><i class=\"mdi mdi-home-variant h2 text-white\"></i></a>\n</div>\n<div>\n  <div class=\"container-fluid p-0\">\n    <div class=\"row g-0\">\n      <div class=\"col-lg-6\">\n        <div\n          class=\"authentication-page-content p-4 d-flex align-items-center min-vh-100\"\n        >\n          <div class=\"w-100\">\n            <div class=\"row justify-content-center\">\n              <div class=\"col-lg-10\">\n                <div>\n                  <div class=\"text-center\">\n                    <div>\n                      <a routerLink=\"\" class=\"logo\"><H1>ESHOP</H1></a>\n                    </div>\n\n                    <h4 class=\"font-size-18 mt-4\">Register account</h4>\n                    <p class=\"text-muted\">Get your free ESHOP account now.</p>\n                  </div>\n\n                  <div class=\"p-2 mt-5\">\n                    <form\n                      class=\"form-horizontal\"\n                      [formGroup]=\"signupForm\"\n                      (ngSubmit)=\"onSubmit()\"\n                    >\n                      <ngb-alert\n                        type=\"success\"\n                        *ngIf=\"successmsg\"\n                        [dismissible]=\"false\"\n                        >Registeration successfull.\n                      </ngb-alert>\n                      <ngb-alert\n                        *ngFor=\"let item of errors\"\n                        [type]=\"item.type\"\n                        type=\"danger\"\n                        [dismissible]=\"false\"\n                        >{{ item }}</ngb-alert\n                      >\n                      <div class=\"row\">\n                        <div class=\"col-md-6\">\n                          <div class=\"form-group auth-form-group-custom mb-4\">\n                            <i\n                              class=\"ri-user-2-line auti-custom-input-icon\"\n                            ></i>\n                            <label for=\"username\">Username</label>\n                            <input\n                              type=\"text\"\n                              formControlName=\"username\"\n                              class=\"form-control\"\n                              [ngClass]=\"{\n                                'is-invalid': submitted && f.username.errors\n                              }\"\n                              id=\"username\"\n                              placeholder=\"Enter username\"\n                            />\n                            <div\n                              *ngIf=\"submitted && f.username.errors\"\n                              class=\"invalid-feedback\"\n                            >\n                              <div *ngIf=\"f.username.errors.required\">\n                                Userame is required\n                              </div>\n                            </div>\n                            <div *ngFor=\"let error of errors.username\">\n                              <small style=\"color: red\">{{ error }}</small>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div class=\"col-md-6\">\n                          <div class=\"form-group\">\n                            <div class=\"form-group auth-form-group-custom mb-4\">\n                              <i\n                                class=\"ri-mail-line auti-custom-input-icon\"\n                              ></i>\n                              <label for=\"email\">Email</label>\n                              <input\n                                type=\"email\"\n                                formControlName=\"email\"\n                                class=\"form-control\"\n                                [ngClass]=\"{\n                                  'is-invalid': submitted && f.email.errors\n                                }\"\n                                id=\"email\"\n                                placeholder=\"Email\"\n                              />\n                              <div\n                                *ngIf=\"submitted && f.email.errors\"\n                                class=\"invalid-feedback\"\n                              >\n                                <div *ngIf=\"f.email.errors.required\">\n                                  Email is required\n                                </div>\n                                <div *ngIf=\"f.email.errors.email\">\n                                  Email must be a valid email address\n                                </div>\n                              </div>\n                              <div *ngFor=\"let error of errors.email\">\n                                <small style=\"color: red\">{{ error }}</small>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"row\">\n                        <div class=\"col-md-6\">\n                          <div class=\"form-group auth-form-group-custom mb-4\">\n                            <i\n                              class=\"ri-user-2-line auti-custom-input-icon\"\n                            ></i>\n                            <label for=\"first_name\">First name</label>\n                            <input\n                              type=\"text\"\n                              formControlName=\"first_name\"\n                              class=\"form-control\"\n                              [ngClass]=\"{\n                                'is-invalid': submitted && f.first_name.errors\n                              }\"\n                              id=\"first_name\"\n                              placeholder=\"Enter first name\"\n                            />\n                            <div\n                              *ngIf=\"submitted && f.first_name.errors\"\n                              class=\"invalid-feedback\"\n                            >\n                              <div *ngIf=\"f.first_name.errors.required\">\n                                first_name is required\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div class=\"col-md-6\">\n                          <div class=\"form-group\">\n                            <div class=\"form-group\">\n                              <div\n                                class=\"form-group auth-form-group-custom mb-4\"\n                              >\n                                <i\n                                  class=\"ri-user-2-line auti-custom-input-icon\"\n                                ></i>\n                                <label for=\"last_name\">Last name</label>\n                                <input\n                                  type=\"last_name\"\n                                  formControlName=\"last_name\"\n                                  class=\"form-control\"\n                                  [ngClass]=\"{\n                                    'is-invalid':\n                                      submitted && f?.last_name?.errors\n                                  }\"\n                                  id=\"last_name\"\n                                  placeholder=\"last name\"\n                                />\n                                <div\n                                  *ngIf=\"submitted && f?.last_name?.errors\"\n                                  class=\"invalid-feedback\"\n                                >\n                                  <div *ngIf=\"f?.last_name?.errors?.required\">\n                                    last_name is required\n                                  </div>\n                                  <div *ngIf=\"f.last_name.errors.last_name\">\n                                    last_name must be a valid last_name address\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-md-6\">\n                          <div class=\"form-group auth-form-group-custom mb-4\">\n                            <i\n                              class=\"ri-lock-2-line auti-custom-input-icon\"\n                            ></i>\n                            <label for=\"password\">Password</label>\n                            <input\n                              type=\"password\"\n                              formControlName=\"password\"\n                              class=\"form-control\"\n                              [ngClass]=\"{\n                                'is-invalid': submitted && f.password?.errors\n                              }\"\n                              id=\"password\"\n                              placeholder=\"Password\"\n                            />\n                            <div\n                              *ngIf=\"submitted && f.password?.errors\"\n                              class=\"invalid-feedback\"\n                            >\n                              <div *ngIf=\"f.password.errors?.required\">\n                                Password is required\n                              </div>\n                            </div>\n                            <div *ngFor=\"let error of errors?.password\">\n                              <small style=\"color: red\">{{ error }}</small>\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"col-md-6\">\n                          <div class=\"form-group auth-form-group-custom mb-4\">\n                            <i\n                              class=\"ri-lock-2-line auti-custom-input-icon\"\n                            ></i>\n                            <label for=\"password\">Confirm</label>\n                            <input\n                              type=\"password\"\n                              formControlName=\"password2\"\n                              class=\"form-control\"\n                              [ngClass]=\"{\n                                'is-invalid': submitted && f?.password2?.errors\n                              }\"\n                              id=\"password2\"\n                              placeholder=\"Confirm password\"\n                            />\n                            <div\n                              *ngIf=\"submitted && f?.password2?.errors\"\n                              class=\"invalid-feedback\"\n                            >\n                              <div *ngIf=\"f.password?.errors?.required\">\n                                Password is required\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div class=\"text-center d-grid gap-2\">\n                        <!-- <button\n                          class=\"btn btn-primary w-md waves-effect waves-light\"\n                          type=\"submit\"\n                        >\n                          Register\n                        </button> -->\n                        <button\n                          class=\"btn btn-primary\"\n                          type=\"submit\"\n                          [disabled]=\"issubmitting\"\n                        >\n                          <span\n                            class=\"spinner-border spinner-border-sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                            *ngIf=\"issubmitting\"\n                          ></span>\n                          {{ issubmitting ? \"Submitting...\" : \"Submit\" }}\n                        </button>\n                      </div>\n\n                      <div class=\"mt-4 text-center\">\n                        <p class=\"mb-0\">\n                          By registering you agree to the Nazox\n                          <a href=\"#\" class=\"text-primary\">Terms of Use</a>\n                        </p>\n                      </div>\n                    </form>\n                  </div>\n\n                  <div class=\"mt-5 text-center\">\n                    <p>\n                      Already have an account ?\n                      <a\n                        routerLink=\"/account/login\"\n                        class=\"fw-medium text-primary\"\n                      >\n                        Login</a\n                      >\n                    </p>\n                    <p>\n                      © 2023 ESHOP. Crafted with\n                      <i class=\"mdi mdi-heart text-danger\"></i> by Themesdesign\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-lg-6\">\n        <div class=\"authentication-bg\">\n          <div class=\"bg-overlay\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!-- end page -->\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { User } from '../models/auth.models';\n\n@Injectable({ providedIn: 'root' })\nexport class UserProfileService {\n    constructor(private http: HttpClient) { }\n\n    getAll() {\n        return this.http.get<User[]>(`/api/login`);\n    }\n\n    register(user: User) {\n        return this.http.post(`/users/register`, user);\n    }\n}\n"],"names":["RouterModule","routes","path","loadChildren","then","m","AuthModule","AccountRoutingModule","forChild","imports","exports","CommonModule","AccountModule","LoginComponent","SignupComponent","PasswordresetComponent","component","AuthRoutingModule","ReactiveFormsModule","NgbAlertModule","UiModule","declarations","Validators","environment","i0","constructor","httpShareService","formBuilder","route","router","authenticationService","authFackservice","customAlert","Date","getFullYear","ngOnInit","document","body","removeAttribute","classList","add","loginForm","group","username","required","password","f","controls","onSubmit","submitted","invalid","login_url","E_SHOP_BASE_URL","AUTHENTICATION","AUTHENTICATION_BASE_URL","LOGIN_URL","post","value","subscribe","data","sessionStorage","setItem","navigate","error","console","log","selectors","decls","vars","consts","template","ctx","resetForm","email","ngAfterViewInit","success","defaultauth","resetPassword","catch","userService","sharedService","first_name","password2","last_name","signupForm","clearErrors","errors","issubmitting","warningToast","regester_url","REGISTER_URL","successToast","handleErrorResponse","errorToast","errorResponse","field","hasOwnProperty","UserProfileService","http","getAll","get","register","user","factory","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}